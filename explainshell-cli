#!/bin/bash
# AUTHOR: Joey Stevens
# Description: Parses explainshell.com and prettifies for CLI output
# Usage: First command line argument should be the command to examine
#        e.g explainshell-cli "grep -ioP"

init_vars() {
	IFS=$'\n'
	bold=$(tput bold)
	normal=$(tput sgr0)
	indent_one="\t"
	indent_two="\t\t"
	indent_three="\t\t\t"
	term_width=$(tput cols)
	if [ $term_width -gt 120 ]; then
		outputwidth=$(($term_width-40))
	else
		outputwidth=$((term_width-25))
	fi
}

function translateNonSaneCharacters() {
	# TODO
	input="$1"
	output=$(echo -e "$input" | sed "s/Â´/'/g")
	echo "$output"
}

function toCenter() {
	if [ "$1" ]; then
		text="$1"
	else
		while read pipe; do
			text="$pipe"
		done
	fi
	printf "%*s\n" $(( (${#text} + term_width) / 2)) "$text"
}

function prettyPrintCommandSections() {
	command_to_print="$2"
	name="$1"
	programName="$3"
	firstCommandLine="$4"
	name=$(echo -e "$name" | sed 's/\n//2' | fold -sw "$outputwidth")
	command_to_print=$(echo -e "$command_to_print" | sed 's/\n//2' | fold -sw "$outputwidth")
	if [ "$programName" ] && [ $((outputwidth)) -gt $((${#command_to_print}+${#name})) ]; then 
			echo -n "${bold}$name${normal} "
	else
		echo -e "$indent_one ${bold}$name${normal}"
	fi
	for i in $(echo -e "$command_to_print"); do
		i=$(echo -e "$i" | sed 's/^   //g')
		if [ "$firstCommandLine" ] && [ $((outputwidth)) -gt $((${#command_to_print}+${#name})) ]; then
			echo -e "$i"
		else
			echo -e "$indent_two $i"
		fi
	done 
}

function fixNewLines() {
	input="$1"
	echo -e "$input" | tr -d '\n' | sed -e 's/    /\n/g'
}

function explainshell() {
	cmd="$1"
	resp=$(curl -s "http://explainshell.com/explain?cmd=$cmd")
	ids=$(echo -e "$resp"| pup -p 'pre.help-box json{}' | jq -r ".[] | .id")

	programName=true
	firstCommandLine=true
	toCenter "${bold}${underline}$cmd${normal}"
	for id in $(echo -e "$ids"); do 
		command_name=$(echo -e "$resp" | pup -p "span[helpref=$id] text{}")
		command_name=$(fixNewLines "$command_name")
		command_help=$(echo -e "$resp"| pup -p "#$id text{}") 
		command_help=$(fixNewLines "$command_help")
		prettyPrintCommandSections "$command_name" "$command_help" "$programName" "$firstCommandLine"
		if [ "$firstCommandLine" ]; then unset firstCommandLine; fi
		if [ "$programName" ]; then unset  programName; fi
	done
}


init_vars
explainshell "$1"